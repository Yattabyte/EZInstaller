language: cpp
os: linux
dist: xenial

cache:
- directories:
  - $HOME/.cache

addons:
  apt:
    sources: &apt_sources
      - ubuntu-toolchain-r-test
      - llvm-toolchain-xenial-7
      - llvm-toolchain-xenial-8
      - sourceline: 'deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial-9 main'
        key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'

jobs:
  include:
    ################
    # CLANG BUILDS #
    # ver: 7-9     #
    ################
    # - addons: &clang7
        # apt:
      # sources: *apt_sources
          # packages: ["clang-7", "g++-8", "libc++-7-dev", "libc++abi-7-dev", "libstdc++-7-dev"]
      # env: COMPILER_CXX=clang++-7 COMPILER_C=clang-7
    
    - addons: &clang8
        apt:
          sources: *apt_sources
          packages: ["clang-8", "g++-8", "libc++-8-dev", "libc++abi-8-dev", "libstdc++-8-dev"]
      env: COMPILER_CXX=clang++-8 COMPILER_C=clang-8
  
    # - addons: &clang9
        # apt:
          # sources: *apt_sources
          # packages: ["clang-9", "g++-9", "libc++-9-dev", "libc++abi-9-dev", "libstdc++-9-dev"]
      # env: COMPILER_CXX=clang++-9 COMPILER_C=clang-9
    
    ##############
    # GCC BUILDS #
    # ver: 8-9   #
    ##############   
    # - addons: &gcc8
        # apt:
          # sources: *apt_sources
          # packages: g++-8
      # env: COMPILER_CXX=g++-8 COMPILER_C=gcc-8
  
    # - addons: &gcc9
        # apt:
          # sources: *apt_sources
          # packages: g++-9
      # env: COMPILER_CXX=g++-9 COMPILER_C=gcc-9

install:
  - mkdir -p $HOME/.cache
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}
  - |
      LCOV_URL="https://github.com/linux-test-project/lcov/releases/download/v1.14/lcov-1.14.tar.gz"
      mkdir lcov && travis_retry wget --no-check-certificate -O - ${LCOV_URL} | tar --strip-components=1 -xz -C lcov
      cd lcov
      make install
      export PATH=${DEPS_DIR}/lcov/bin:${PATH}
  - cd ${TRAVIS_BUILD_DIR}
  - export CXX="${COMPILER_CXX}"
  - export CC="${COMPILER_C}"
  
script:
  - mkdir -p build && cd build
  - cmake --version
  - lcov --version
  - gcov --version
  
  #######################
  # Code Coverage Build #
  #######################
  - cmake -DCMAKE_CXX_COMPILER=${CXX} -DCMAKE_C_COMPILER=${CC} -DBUILD_TESTING=ON -DCODE_COVERAGE=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-g -O0 -fprofile-arcs -ftest-coverage --coverage".. || exit 1
  - cmake --build . --clean-first --config Debug -- -j $(nproc) || exit 1
  - ctest --verbose --output-on-failure -C Debug -j $(nproc) || exit 1
  - lcov --directory . --capture --output-file coverage.info --gcov-tool gcov-8
  - lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
  - lcov --list coverage.info
  - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports" exit

  ###############
  # Debug Build #
  ###############
  - cmake -DCMAKE_CXX_COMPILER=${CXX} -DCMAKE_C_COMPILER=${CC} -DBUILD_TESTING=ON -DCODE_COVERAGE=OFF -DCMAKE_BUILD_TYPE=Debug .. || exit 1
  - cmake --build . --clean-first --config Debug -- -j $(nproc) || exit 1
  - ctest --verbose --output-on-failure -C Debug -j $(nproc) || exit 1
  
  #################
  # Release Build #
  #################
  - cmake -DCMAKE_CXX_COMPILER=${CXX} -DCMAKE_C_COMPILER=${CC} -DBUILD_TESTING=ON -DCODE_COVERAGE=OFF -DCMAKE_BUILD_TYPE=Release .. || exit 1
  - cmake --build . --clean-first --config Release -- -j $(nproc) || exit 1
  - ctest --verbose --output-on-failure -C Release -j $(nproc) || exit 1